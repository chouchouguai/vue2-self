{"version":3,"file":"vue.js","sources":["../src/utils/index.js","../src/global-api/index.js","../src/compile/generate.js","../src/compile/parseAst.js","../src/compile/index.js","../src/observe/arr.js","../src/observe/index.js","../src/initState.js","../src/vnode/patch.js","../src/lifecycle.js","../src/init.js","../src/vnode/index.js","../src/index.js"],"sourcesContent":["//对象合并\nexport const HOOKS = [\n    \"beforeCreate\",\n    \"created\",\n    \"beforeMount\",\n    \"mounted\",\n    \"beforeUpdate\",\n    \"updated\",\n    \"beforeDestory\",\n    \"destoryed\"\n];\n//策略模式 -一般如果判断if情况比较多 可以用该模式\nlet starts = {};\n//处理数据\nstarts.data = function(parentVal,childVal){\n    return childVal;\n}//合并data\nstarts.computed = function(){}//合并computed\nstarts.watch = function(){}//合并watch\nstarts.methods = function(){}//合并methods\n//遍历生命周期，依次添加starts[beforeCreate],starts[created]。。等\nHOOKS.forEach(hooks=>{\n    starts[hooks] = mergeHook\n})\nfunction mergeHook(parentVal,childVal){\n    // {created:[a,b,c],watch:[a,b]}\n    if(childVal){\n        if(parentVal){\n            return parentVal.concat(childVal)\n        }else{\n            return [childVal]//[a]\n        }\n    }else{\n        return parentVal\n    }\n}\n/**\n * \n * @param {*} parent \n * @param {*} child  Vue.Mixin(参数),参数就是child\n * @returns \n */\nexport function mergeOptions(parent,child){\n    console.log('---mergeOptions',parent,child)\n    //Vue.options = {created:[a,b,c],watch:[a,b]}\n    const options = {};\n    //如果有parent 没有 child\n    for(let key in parent){\n        mergeField(key)\n    }\n    //有child 没有 parent\n    for(let key in child){//child就是传过来的mixin 第一次child={created:function a(){}}\n        mergeField(key)\n    }\n    function mergeField(key){\n        //根据key 策略模式\n        if(starts[key]){//若存在该方法\n            options[key] = starts[key](parent[key],child[key])\n        }else{\n            options[key] = child[key]\n        }\n    }\n    // console.log('---optiosns',options)\n    return options;\n}","import { mergeOptions } from \"../utils/index\"\n/**\n * \n * @param {*} Vue \n *  源码中最终 Vue.options = {created:[a,b,c],watch:[a,b]}\n */\nexport function initGlobalApi(Vue){\n   \n    Vue.options = {}\n    Vue.Mixin = function (mixin){//mixin为Vue.Mixin(的参数=mixin)\n        // console.log('---mixin',mixin,this.options)\n        //对象的合并\n        this.options = mergeOptions(this.options,mixin)//this是当前vue实例,第一次this.options没值\n       console.log('---initG',Vue.options);\n       console.log('----Vue.$options',Vue);\n\n    }\n}","/**\n * <div id=\"app\" >Hello {{msg}} </div>\n * render(){ //_c解析标签,_v解析文本,_s解析插值表达式\n *   return _c('div',{id:app},_v('hello'+_s(msg)),_c())\n * }\n * 本文件的主要任务就是获取render函数的字符串部分\n * \n */\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;// 匹配默认 {{}}\n/**\n * 处理属性ast中 {name:'style',value: \"color:red;font-size: 20px\"\n * return: {style:{color:'red',font-size: '20px'}}\n * */\nfunction genProps(attrs) {\n    let str = '';\n    for (let i = 0; i < attrs.length; i++) {\n        let attr = attrs[i];//{name:'style',value: \"color:red;font-size: 20px\"\n        if (attr.name === 'style') {//获取是否是行内样式\n            let obj = {};\n            attr.value.split(';').forEach(item => {//[\"color:'red'\"\",\"font-size:'20px'\"]\n                let [key, value] = item.split(\":\");\n                obj[key] = value;//obj[color]='red',obj['font-size']=\"20px\"\n            });\n            attr.value = obj;\n        }\n        str += `${attr.name}:${JSON.stringify(attr.value)},`;//str+='style:\"{color:red,font-size:20px}\"'\n    }\n    return `{${str.slice(0, -1)}}`\n}\n//处理所有子节点们\n/**\n * \n * @param {*} el \n * @returns \n */\nfunction genChildren(el) {\n    let children = el.children;//children:[{type: 3, text: 'Hello {{msg}} '}]\n    // console.log('---children', children)\n    if (children) {\n        return children.map(child => gen(child)).join(',')//_v('hello'),_v\n    }\n}\n/**\n * 处理子节点\n * @param {*} node\n */\nfunction gen(node) {\n    if (node.type == 1) {//若是元素节点\n        return generate(node)\n    } else {//非元素节点，本处默认就是文本 1)普通文本 2）{{msg}}\n        let text = node.text;//获取文本内容 hello {{msg}}\n        if (!defaultTagRE.test(text)) {//检查文本中是否无插值表达式\n            return `_v(${JSON.stringify(text)})`;//解析普通文本用_v()函数\n        }\n        //有{{}}\n        let tokens = [];//存放每一段的代码\n        let lastindex = defaultTagRE.lastIndex = 0;//若没有给lastIndex(下次匹配的起始位置)赋值，则defaultTagRE.test只能匹配一个字符串\n        let match\n        while (match = defaultTagRE.exec(text)) {//match=[\"{{msg}}\",\" msg  \",index:7,input:\" hello {{ msg }} \",groups:undefined]\n            let index = match.index;//当前符合正则的下标位置\n            if (index > lastindex) {\n                tokens.push(JSON.stringify(text.slice(lastindex, index)));//截取文本中(从0到{{ 的内容)--普通文本\" hello \"\n            }\n            // {{msg}}\n            tokens.push(`_s(${match[1].trim()})`)\n            //lastindex = 当前下标 + 表达式的长度 如 hello {{ msg }},haha\n            lastindex = index + match[0].length;\n            //\n        }\n        if (lastindex < text.length) {//{{msg}}后面还有 haha ,msg}}最后一个右括号的下标 < text文本的长度\n            tokens.push(JSON.stringify(text.slice(lastindex)))//取出 haha\n        }\n        return `_v(${tokens.join(\"+\")})`\n    }\n}\n\nexport function generate(el) {\n    //注意属性 {id:app,style:{color:red;font-size:12px}}\n    // console.log('---fennerate',el)\n    let children = genChildren(el);\n    //_c(根节点,参数对象||null,子节点||null,)\n    let code = `_c('${el.tag}',${el.attrs.length ? `${genProps(el.attrs)}` : 'undefined'}${children ? `,${children}` : ''})`;\n    // console.log('---code',code)\n    return code;\n}","/**\n * ps：ast语法树 (abstract syntax tree 抽象语法树)  vnode(虚拟节点)\n * 如：页面结构 <div id=\"#app\">hello {{msg}}<span></span></div>\n * 对应ast为：\n * {\n * tag:'div',\n * attrs:[{id:'app'}],\n * children:[{tag:null,text:'hello'},{tag:'span'}]\n */\n\n import { stat } from \"@babel/core/lib/gensync-utils/fs\";\n import { ConstantTypes } from \"@vue/compiler-core\";\n \n /** 以下为vue2中区别标签相关的正则 */\n const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`// 标签名称 ---如 div\n const qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;// 如  <span:xx>\n const startTagOpen = new RegExp(`^<${qnameCapture}`);// 标签开头的正则 捕获的内容是标签名    如 <div\n \n const attribute =\n   /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // \\s所有空白符，包括换行 id=\"app\"\n const startTagClose = /^\\s*(\\/?)>/;// 匹配标签结束的 >   ps: startTagOpen + attribute + startTagClose = \"<div id=\"app\" >\n \n const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;// 匹配默认 {{}}\n const endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);// 匹配标签结尾 </div>\n // 将str -> ast\n // 遍历\n /*\n 如： <div id=\"app\"> hello {{msg}} <h1></h1> </div>\n 创建一个 ast 对象\n 根据标签名和参数 返回一个ast对象 {}\n nodetype的类型\n 1:元素节点\n 2:属性节点\n 3:文本节点\n */\n \n function createASTElement(tag,attrs){\n   return {\n     tag,//元素 div span h等\n     attrs,//属性 id class 等\n     children:[],//子节点 如div 中包含了span 则span就是自己点\n     type:1,//nodetype的类型\n     parent:null//该元素的父元素\n   }\n }\n let root;//根元素\n let createParent ;//当前元素的父元素\n //数据结构 栈:先进后出\n let stack = [];//[div]\n \n \n // 开始标签 <div id='app'>\n /**\n  * \n  * @param {*} tag \n  * @param {*} attrs \n  * 将开始标签转为ast对象，并入栈 (注:end方法中 会将其出栈)\n  */\n function start(tag, attrs) {/**传入标签名 和 参数  */\n   let element = createASTElement(tag,attrs);\n   if(!root){\n     root = element;\n   }\n   createParent = element;\n   stack.push(element);\n }\n // 获取文本 {{msg}}\n function charts(text) {\n//    console.log('文本', text)\n   //替换 空格\n   text = text.replace(/\\s/g,'');//\n   if(text){\n     createParent.children.push({\n       type:3,//文本类型\n       text//文本内容\n     })\n   }\n }\n // 结束标签 </div>\n /**\n  * \n  * @param {*} tag \n  * 从stack中 取出最后进的元素,以及读取前一个元素 将两个元素的父子关系分别用属性parent 和childern关联起来\n  */\n function end(tag) {\n//    console.log('---结束标签end', tag)\n   //如此时<div><h></h></div  stack中有两个元素 [div,h]\n   let element = stack.pop();//取出栈中第一个元素 栈后进先出 pop取的就是最后进的那个 h\n   createParent = stack[stack.length-1];//此时取出的是栈中最后进的前一个 div\n   if(createParent){//元素的闭合\n     element.parent = createParent.tag;//{tag:h,attrs:null,type:1,parent:'div'} \n     createParent.children.push(element);//{tag:div,attrs:[{id:'app'}],type:1,children:[{tag:h,attrs:null,type:1}]}\n   }\n }\n \n \n /**\n  * \n  * @param {*} html - 本次需要转换的html\n  * step1:\n  * 该方法是将html字符串 ->初级形态的ast\n  * 经过该方法后 开始标签 <div id=\"app\"> --->  {tagName:'div',attrs:[{name:'id',value:'app'}]}\n  *            文本    hello {{msg}}   --->  hello {{msg}}\n  *            结束标签  </div>         --->  ['</div>', 'div', index: 0, input: '</div>', groups: undefined]\n  * return :当前html的ast表示对象 (其中用parent 和 childern表示了节点间的包含关系)\n  */\n export function parseHTML(html) {// html中包含的内容只有3大类型:开始标签  文本  结束标签\n   // 如: <div id=\"app\"> hello {{msg}} <h></h> </div> \n   /** 思路 每次解析结束完成部分的html 删除 */\n   while (html) {// html 为空结束\n     // 判断标签\n     let textEnd = html.indexOf('<');\n     if (textEnd === 0) {// html以 < 开头 说明是标签\n       // 1.看是否是开始标签，与开始标签的正则startTagOpen 匹配\n       const startTagMatch = parseStartTag();//  开始标签的内容-该方法是单独定义的\n       // console.log('----startTagMatch',startTagMatch)\n       if (startTagMatch) {\n         start(startTagMatch.tagName, startTagMatch.attrs)//---开始标签的处理，根据标签名称和参数,创建root对象，当前节点对象,转为ast对象并入栈\n         continue;\n       }\n       //结束标签 ->若为结束标签</标签名>\n       let endTagMatch = html.match(endTag)//从html中匹配结束标记的正则(endTag),得到与正则匹配的文本内容\n    //    console.log('---enTagMatch',endTagMatch)\n       if (endTagMatch) {//若存在结束标签 \n         advance(endTagMatch[0].length)\n         end(endTagMatch[1])//到结束标签了 则将当前节点和其父节点关联起来,并放到root对象中去\n         continue;\n       }\n     }\n     // 文本\n     // 说明html 不是< 开头 如： hello</div> ,这个textEnd就是5\n     let text;\n     if (textEnd > 0) {\n       //  解析文本\n       //  获取文本内容 ---方案:// hello</div> 截取< 符号之前的内容(其实就是hello)\n       //  console.log('----textEnd',textEnd)\n       text = html.slice(0, textEnd);\n      //  console.log('---parseHTML',text);\n     }\n     if (text) {\n       advance(text.length)\n       charts(text)//将文本内容放入到root对象中\n     }\n     // break;\n   }\n  /**\n   * 解析开始标签\n   * @returns \n   * {\n   *  tagName:div\n   *  attrs:[\n   *    {\n   *      name:\"id\",\n   *      value:\"app\"\n   *    }\n   * ]\n   * }\n   */\n   function parseStartTag() {\n     // 子表达式指:正则表达式中用小括号包起来的表达式\n     /** match(正则表达式),若正则表达式没有全局标识/g,\n     *   则该match方法只执行一次匹配，\n     *   返回[匹配文本,与子表达式匹配的文本们...,index:匹配开始位置,input:进行匹配的字符串本身的引用] \n     *   若无结果 返回null*/\n     const start = html.match(startTagOpen);\n     // start = ['<div', 'div', index: 0, input: \"<div id='#app'>hello {{msg}}<span></span></div>\", groups: undefined]\n     if (start) {\n       // 创建ast 语法树-初级形态\n       let match = {\n         tagName: start[1],\n         attrs: []\n       }\n       advance(start[0].length)// 向前推进一步 (删除开始标签)\n       // 获取属性 -注意 属性可能有多个 需要遍历\n       let attr\n       /*\n         注意 刚才删除了开始标签 但是开始标签还有个 >  \n         比如第一次删除了开始标签<div  剩余 id='#app'> hello {{msg}} <span></span></div>\n       */\n       let end\n       /* \n         循环剩下的html -若剩余的html 不是单纯的> (html.match(startTagClose) 为true则表示仅为>) \n         并且有属性(html.match(attribute)为true表示有属性内容)\n       */\n       // console.log('---->',html.match(startTagClose))\n       //console.log('----attribute',html.match(attribute))//[' id=\"app\"', 'id', '=', 'app', undefined, undefined, index: 0, input: ' id=\"app\">\\n    Hello {{name}}\\n  </div>', groups: undefined]\n       while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n         // 将属性追加到match的attrs中 [{name:'id',value:'app'}]\n         match.attrs.push({\n           name: attr[1],\n           value: attr[3] || atrr[4] || atrr[5]\n         })\n         advance(attr[0].length)\n       }\n       if (end) {\n         advance(end[0].length)\n         return match;// <div id='app'> 解析完成 返回开始节点对应的ast初级形态语法树\n       }\n     }\n   }\n   function advance(n) {\n     // 删除以及识别出的html字符串 （如 识别了<div 则删除<div,n为识别出的字符串的长度）\n     html = html.substring(n)// 从html的n位置开始截取到最后,返回截取后的内容---删除了识别出的内容\n   }\n  //  console.log('---root',root)\n   return root;\n }\n\n /**\n  * 版本1综合描述：\n  * * 如：页面结构 <div id=\"#app\">hello {{msg}}<h1></h1></div>\n * 最终需要获取内容为：\n * {\n * tag:'div',\n * attrs:[{id:'app'}],\n * children:[{tag:null,text:'hello'},{tag:'span'}]\n * \n  * 根据文本内容字符串<div id=\"#app\">hello {{msg}}<h1></h1></div>\n  * 分析:该字符串中只有3部分内容: 标签 <div> \n  *                           文本 hello {{msg}}\n  *                           标签 <h1> (跟div有父子关系)\n  * 解析入口:parseHTML(html)\n  * 只要html有内容,则一直循环\n    * 1) 若html 是以< 开头,则表示是标签(此时需要考虑 是<div> 还是</div>)-->\n    *     1.1)调用parseStartTag方法\n        *     1.1.1) 若是<div>(开始标签)\n        *        1.1.1.1)找到符合开始标签的正则(startTagOpen) <标签名 属性=\"值\"\n        *        1.1.1.2）创建对象match = {tagName:值,attrs:[]},并删除html 中 “<标签名”部分\n        *        1.1.1.3）找到不符合标签结尾(不是>),且符合参数正则的部分(其实就是标签参数),遍历创建对象,放入到match的attrs中,并删除字符串中的 attr=\"值\"部分\n        *               得到 match={tagName:值,attrs:[{name:参数名,value:参数值}]}\n        *        1.1.1.4）若找到标签结尾(\">\"这个字符串),则直接删除字符串中的“>”部分,并返回 match字段\n        *   1.2）若parseStartTag返回了内容(即match有内容),\n        *     1.2.1)则根据match的内容,创建ast对象-->start方法     \n        *       1.2.1.1） 创建ast对象 \n        *            {\n                            tag,//元素 div span h等\n                            attrs,//属性 id class 等\n                            children:[],//子节点 如div 中包含了span 则span就是自己点\n                            type:1,//nodetype的类型\n                            parent:null//该元素的父元素\n                        }\n                1.2.1.2） 若此时还没有root对象，则该ast对象为root对象\n                1.2.1.3） 当前父节点 createParent,也为该ast对象\n                1.2.1.4） 将该对象放入到ast对象栈 stack中\n            1.2.2） 继续下一轮循环,回到1)\n            1.3) 若parseStartTag没有返回内容,html匹配结束标签正则(</div>这种符合结束标签的字符串)\n            1.3.1）若匹配到结束标签\n                1.3.1.1)删除html字符串中“</div>”部分\n                1.3.1.2）将当前节点的ast与父节点关联起来，--调用end()\n                1.3.1.2.1）从stack栈中取出最后一个放入的ast对象(取出栈中就不存在该对象了),element\n                1.3.1.2.2) 获取stack中倒数第二个放入的ast对象createParent,若createParent存在,\n                        则element.parent为createParent.tag;\n                        createParent.children.push(element)\n        2) 若此时的html不是以<开头，则表示是文本部分\n        2.1）截取html中普通文本内容text\n        2.2) 若text有内容\n                2.2.1）删除html中 字符串部分如“hello {{msg}}”\n                2.2.2) 将文本内容放入root中 charts()\n                2.2.2.1) 替换text中的空字符串\n                2.2.2.2）若替换后内容仍存在,则createParent.children中追加对象\n                            {\n                                type:3//普通文本\n                                text:text//文本内容\n                            }\n    html中再无内容，则返回root对象\n  */","import { generate } from \"./generate\";\nimport { parseHTML } from \"./parseAst\";\n\nexport function compileToFunction(el) {\n  // 1.将html 变成ast语法树\n  let ast = parseHTML(el);\n  // console.log('---ast',ast);\n  // 2. ast语法树变成render函数\n  // 2.1）ast语法树变成 字符串\n  \n  let code = generate(ast);//_c _v _s\n  // console.log('----ast语法变成的字符串',code);\n  // 2.2）字符串变成render函数\n  let render = new Function(`with(this){console.log('render',this);return ${code}}`);//code中的this 指向了Vue实例对象，其中msg的值相当于vue实例的msg值\n  // console.log('---render',render);\n  return render;\n}\n/**\n * \n * \n let objs = {a:1,b:2};\nwith(objs){//利用with提供作用域\n  console.log(a,b)//1,2\n}\n */\n","/**重写数组中的方法\n * 类名.prototype ->指向原型对象,该对象中包含了所有实例共享的属性和方法\n * 对象.__proto__ ->指向该对象所属类的prototype 两个完全相等\n */\n\n\n\n//1.获取原数组中的方法\nlet oldArrayProtoMethods = Array.prototype;\n//2.继承 ->通过指定原型对象 创建新对象ArrayMethods  ;ArrayMethods.__proto__ 指向oldArrayProtoMethods\nexport let ArrayMethods = Object.create(oldArrayProtoMethods);\n//3.列出所有需要劫持的方法\nlet methods = [\n  'push',\n  'pop',\n  'unshift',\n  'shift',\n  'pop'\n];\nmethods.forEach(item=>{\n  ArrayMethods[item] = function(...args){\n    // console.log('---劫持了数组方法item',this,args)//此时的args是个数组[],会将传入的内容放入该数组中s\n    let result = oldArrayProtoMethods[item].apply(this,args);\n    //1.此时要考虑数组追加数据的情况  如原arr = [1,2]\n    //因为追加的数据可能是1)普通3==>[1,2,3]    2）对象 {a:1} ==>[1,2,{a:1}]\n    //2.考虑追加的方式 push unshift splice\n    let inserted;//追加的内容\n    switch(item){\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.splice(2);// arr.splice(开始位置,删除长度,追加内容)\n        break;\n    }\n    /*对追加的内容进行劫持observer(inserted)\n      但是因为observer方法在./index.js中,此处无法获取(别在此处引入index.js,因为index.js引入了当前文件，会造成互相引用)\n      可以考虑将observer方法绑定在当前实例对象的某个属性上 这样当前对象可以直接使用\n      先在此处打印下this--》看看this指向谁 -通过打印得知,this指向当前数组对象 list\n    */\n    // console.log('---this',this)\n    let obj = this.__ob__;\n    if(inserted){\n      obj.observerArray(inserted)//因为args是数组 所以推荐使用observerArray\n    }\n    return result;\n    \n  }\n})","/**需要劫持的类型分两种\n * 1) 对象: 利用Object.defineProperty \n *    -缺点:只能对对象中的一个属性进行劫持\n *    -遍历:{a:1,b:2,c:3}   \n *    -递归:{a:{b:1}} get set\n * 2) 数组:方法函数劫持,重写数组方法 push unshift pop splice\n *    \n * **/\nimport {ArrayMethods} from './arr'\n//对外暴漏劫持对象方法\nexport function observer(data) {\n  // console.log('---observer', data);\n  if (typeof data != 'object' || data == null) {\n    return data; //若data不是对象 或者为null 则不需要劫持\n  }\n  //1.对象 通过一个类进行劫持\n  return new Observer(data)\n}\nclass Observer {\n  //vue2 通过defineProperty 缺点:只能对对象中的一个属性进行劫持\n  constructor(value) { //构造器\n    if(Array.isArray(value)){//数组对象劫持方法\n      value.__proto__ = ArrayMethods;\n      //如果是数组对象 [{a:1},{b:2}]\n      this.observerArray(value)\n    }else{\n      this.walk(value) //遍历非数组对象\n    }\n    /**给value上新增一个属性__obj__,值为Observer当前实例对象,\n     * 这样在劫持的data中都会有一个不可枚举的属性__obj__,可枚举性决定了这个属性能否被for…in查找遍历到\n     * 该属性直接指向当前observer实例对象（则可以直接使用observer实例上的方法）\n     * **/\n    Object.defineProperty(value,\"__ob__\",{\n      enumerable:false,\n      value:this\n    })\n  }\n  //遍历非数组对象 进行劫持\n  walk(data) {\n    let keys = Object.keys(data) //{a:{n:1},list:[1,2,3],arr:[{n:1,m:2}]} ->[a,list,arr]\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = data[key];\n      defineReactive(data, key, value); //对data中的属性取值和赋值时的操作和处理\n    }\n  }\n  //遍历数组对象 进行劫持\n  observerArray(value){//value=[{a:1},{b:2}]\n    // console.log('--value',value,value.length)\n    for(let i=0;i<value.length;i++){\n      observer(value[i]);//单独劫持数组中的每个对象\n    }\n  }\n}\n//对对象中的属性进行拦截和处理\nfunction defineReactive(data, key, value) {\n  observer(value); //对value进行递归 深度代理-> 最初的data可能是{a:{b:1}} 若value值依然是对象 则继续重复劫持该对象--直到值为普通数据\n  Object.defineProperty(data, key, {\n    get() { //外部调用data.key时触发get方法\n      // console.log('--get')\n      return value;\n    },\n    set(newValue) {\n      // console.log('----set')\n      if (newValue === value) return; //两次内容一样 不做处理\n      observer(newValue)//修改的value也要代理（如 a:{b:1}===> a:{c:1}）,值{c:1}也需要被代理\n      value = newValue; //否则将新值赋值给旧值\n    }\n  })\n}","import { observer } from \"./observe/index\"\n\n/**初始化数据的文件？ */\nexport function initState(vm){\n  let opts = vm.$options\n  // console.log('--opts',opts)\n  //判断\n  if(opts.props){\n    initProps()\n  }\n  if(opts.data){\n    initData(vm)\n  }\n  if(opts.watch){\n    initWatch()\n  }\n  if(opts.computed){\n    initComputed()\n  }\n  if(opts.methods){\n    initMethods()\n  }\n}\nfunction initProps(){\n}\nfunction initWatch(){\n}\nfunction initComputed(){\n}\nfunction initMethods(){\n}\n//vue2 对data初始化\n/**\n * data对象情况区分：--为了解决作用域问题\n * 1）根实例是对象 {}\n * 2) 组件是函数 (){} --是为了保证组件的独立性和可复用性\n */\nfunction initData(vm){\n  // console.log('---对data进行初始化',vm);\n  let data = vm.$options.data;\n  //获取data数据\n  data = vm._data = typeof data =='function'?data.call(vm):data;//1. 注意this 2.为了方便获取 将原option中data的值直接绑定到vm._data中\n  //对数据进行劫持\n  //将data上的所有属性代理到vm实例上\n  for(let key in data){\n    //自定义函数proxy \n    proxy(vm,'_data',key)\n  }\n  observer(data)// 注意 此时拿到的data可能是以下情况 (1）对象  (2) 数组  {a:{n:1},list:[1,2,3],arr:[{n:1,m:2}]}    \n}\n//用于将代理 vm._data属性中的内容 全都直接放到vm中,key依然为原data中的key=> vm._data={a:1,b:2} 代理处理后为:vm.a=1 vm.b=2\nfunction proxy(vm,source,key){\n  Object.defineProperty(vm,key,{//定义vm中的key属性,vm.key时返回 vm._data.key的值\n    get(){\n      return vm[source][key]\n    },\n    set(newValue){//vm.key=newValue时 相当于调用vm._data.key = newValue\n      vm[source][key] = newValue;\n    }\n  })\n}\n","/**\n * \n * @param {*} oldVnode 原容器\n * @param {*} vnode 虚拟dom\n */\nexport function patch(oldVnode,vnode){\n    // console.log(oldVnode,vnode)\n    // vnode=>真实dom\n    //1)创建新的DOM\n    let el = createEl(vnode);\n    // console.log('---真实domel',el);\n    //2)替换 2.1）获取父节点 2.2）插入新dom 2.3）删除旧元素\n    let parentEl = oldVnode.parentNode;// body\n    parentEl.insertBefore(el,oldVnode.nextsibling);//在旧节点的下一个兄弟节点 插入新dom\n    parentEl.removeChild(oldVnode);//删除旧元素\n    return el;//返回新dom\n}\n//创建dom\nfunction createEl(vnode){//vnode:{tag,text,data,children}---{tag: 'div', data: {…}, key: undefined, children: Array(2), text: undefined}\n    let {tag,children,key,data,text} = vnode;\n    if(typeof tag =='string'){//标签\n        vnode.el = document.createElement(tag);\n        //children->遍历子节点 继续创建dom\n        if(children.length>0){\n            children.forEach(child => {\n                vnode.el.appendChild(createEl(child))\n            });\n        }\n    }else{//文本\n        vnode.el = document.createTextNode(text);\n    }\n    return vnode.el;//此时的el已经是真实dom\n}\n/**\n * vue 渲染流程：\n * 1） 数据初始化\n * 2） 对模版进行编译\n *     模版内容-> ast语法树->变成render函数\n *     ->render函数执行后得到vnode ->变成真实dom->放到页面\n *    \n */","import { PatchFlagNames } from \"@vue/shared\";\nimport { patch } from \"./vnode/patch\";\n\n/**\n * \n生命周期文件\n */\nexport function mounteComponent(vm,el){\n    //源码--页面加载之前 调用beforeMounted\n    callHook(vm,\"beforeMounted\");\n    vm._update(vm._render())//1)vm._render将render函数变成vnode 2)vm._update 将vnode变成真实dom 放到页面上 -本次操作即为页面加载\n    callHook(vm,\"mounted\");\n\n}\n/**\n * \n * @param {*} Vue \n */\nexport function lifecycleMixin(Vue){\n    Vue.prototype._update = function(vnode){//vnode => 真实的dom\n        // console.log('---vnode',vnode)\n        let vm = this;\n        //参数 1）容器节点 2)vnode\n        vm.$el = patch(vm.$el,vnode);//vue中的patch方法就是将虚拟dom->真实dom\n    } \n}\n//1)render()函数 ==》vnode ==》真实dom\n\n//生命周期调用（订阅发布的模式）\nexport function callHook(vm,hook){\n    console.log('---',hook);\n    const handles = vm.$options[hook]// 如hook为created, 则handles=[a,b,created]\n    console.log('---handles',handles);\n    if(handles){\n        for(let i=0;i<handles.length;i++){//性能最好的就是这种原始for\n            handles[i].call(this);//改变生命周期中的this指向问题\n        }\n    }\n}","//Vue所有初始化的内容\nimport { compileToFunction } from \"./compile/index\";\nimport { initState } from \"./initState\";\nimport { callHook, mounteComponent } from \"./lifecycle\";\nimport { mergeOptions } from \"./utils/index\";\nexport function initMixin(Vue){\n  //_init方法放到Vue原型链上\n  Vue.prototype._init = function(options){\n    // console.log('_initMixin中Vue原型链上的',options);\n    let vm = this\n    // vm.$options = options//将参数帮到实例上\n    vm.$options = mergeOptions(Vue.options,options);//将Vue上原有的option属性和本次传入的option合并 重新放到实例对象上\n    callHook(vm,'beforeCreated');//初始化之前\n    //初始化状态\n    initState(vm);\n    callHook(vm,'created');//初始化之后\n    //渲染模版\n    if(vm.$options.el){\n      //调用vm实例的$mount方法--此方法需要定义\n      vm.$mount(vm.$options.el)\n    }\n  }\n  //创建$mount方法\n  Vue.prototype.$mount = function(el){\n    // console.log('---el',el)\n    let vm = this;\n    el = document.querySelector(el);//根据id获取当前绑定的根节点-object\n    vm.$el = el;//将根节点绑定到vm实例的$el属性上\n    // console.log('---el',typeof el);\n    let options = vm.$options;\n    if(!options.render){//new Vue的时候没有指定render函数\n      let template = options.template;\n      if(!template && el){//new Vue的时候没有指定模版，且存在根节点\n        el = el.outerHTML; //string-[1]\n        //获取到el的最终目的是为了变成render函数\n        //将el--->ast语法树 ast语法树--->render函数\n        let render = compileToFunction(el);\n        // console.log('---render',render);\n        //1) 将render 函数变成vnode\n        //2) 将vnode变成真实DOM 放到页面上\n        options.render = render;//将拿到的render函数放到实例对象options的render中\n        //---todo 将虚拟的dom变为真实dom\n\n      }\n\n    }\n    //挂载组件--调用生命周期文件中的挂载组件方法\n    mounteComponent(vm,el)//vm._update(vm._render)\n  }\n}\n/**\n * [1].获取到el之后要做的事情是\n *     1)变成ast语法树\n *     2)生成render()函数\n *     3)render函数变成虚拟dom\n *     4)\n \n * }\n */\n","\n//将render函数变成vnode(虚拟节点)\nexport function renderMixin(Vue){\n    /**\n     * 标签解析\n     */\n    Vue.prototype._c = function(){\n        //创建标签\n        return createElement(...arguments);\n    }\n    /**\n     * 文本解析\n     */\n     Vue.prototype._v = function(text){\n        return createText(text)\n    }\n    /**\n     * 变量解析 _s(name) -->{{name}}\n     */\n     Vue.prototype._s = function(val){\n        // console.log('---_S',val);\n        return val ==null?'':(typeof val ==='object')?JSON.stringify(val):val\n    }\n    Vue.prototype._render = function(){\n        let vm = this;\n        let render = vm.$options.render;//获取实例上的render(该render最终是ast语法树转换成的render函数)\n        let vnode = render.call(this)//执行render函数,将当前vm实例作为render中的this\n        // console.log('---vnode',vnode)\n        return vnode;\n    }\n}\n//创建元素的方法\n/**\n * \n * @param {*} tag \n * @param {*} data \n * @param  {...any} chiildren \n */\nfunction createElement(tag,data={},...children){\n    return vnode(tag,data,data.key,children)\n}\n//创建文本\nfunction createText(text){\n    return vnode(undefined,undefined,undefined,undefined,text)\n}\nfunction vnode(tag,data,key,children,text){\n    return {\n        tag,data,key,children,text\n    }\n}\n/**\n * vnode节点\n * {\n *  tag,\n * text,\n * chiildren\n * }\n */","//项目入口文件\nimport { initGlobalApi } from './global-api/index.js'\nimport {initMixin} from './init.js'\nimport { lifecycleMixin } from './lifecycle.js'\nimport { renderMixin } from './vnode/index.js'\nfunction Vue(options){//通过new Vue调用\n  // console.log('---100 -w 的作用 自动更新dist的vue')\n  // console.log(options)\n  //初始化\n  this._init(options)\n}\ninitMixin(Vue)//调用该方法会向Vue对象的原型链上添加_init方法——对状态进行初始化\nlifecycleMixin(Vue)//对生命周期进行初始化\nrenderMixin(Vue)//添加vm._render方法\n\n//全局方法 vue.mixin Vue.component Vue.extend\ninitGlobalApi(Vue);//初始化全局方法\nexport default Vue\n\n/**\n * new Vue(options) \n *    ->调用当前vue实例的_init(options)\n *      (前提是在init.js中initMixin方法已定义了Vue.property._init方法\n *       Vue.property._init方法,调用mergeOptions(Vue.options,options),此处的options就是New Vue(options)的参数\n */"],"names":["HOOKS","starts","data","parentVal","childVal","computed","watch","methods","forEach","hooks","mergeHook","concat","mergeOptions","parent","child","console","log","options","key","mergeField","initGlobalApi","Vue","Mixin","mixin","defaultTagRE","genProps","attrs","str","i","length","attr","name","obj","value","split","item","JSON","stringify","slice","genChildren","el","children","map","gen","join","node","type","generate","text","test","tokens","lastindex","lastIndex","match","exec","index","push","trim","code","tag","ncname","qnameCapture","startTagOpen","RegExp","attribute","startTagClose","endTag","createASTElement","root","createParent","stack","start","element","charts","replace","end","pop","parseHTML","html","textEnd","indexOf","startTagMatch","parseStartTag","tagName","endTagMatch","advance","atrr","n","substring","compileToFunction","ast","render","Function","oldArrayProtoMethods","Array","prototype","ArrayMethods","Object","create","args","result","apply","inserted","splice","__ob__","observerArray","observer","Observer","constructor","isArray","__proto__","walk","defineProperty","enumerable","keys","defineReactive","get","set","newValue","initState","vm","opts","$options","props","initData","_data","call","proxy","source","patch","oldVnode","vnode","createEl","parentEl","parentNode","insertBefore","nextsibling","removeChild","document","createElement","appendChild","createTextNode","mounteComponent","callHook","_update","_render","lifecycleMixin","$el","hook","handles","initMixin","_init","$mount","querySelector","template","outerHTML","renderMixin","_c","arguments","_v","createText","_s","val","undefined"],"mappings":";;;;;;IAAA;IACO,MAAMA,KAAK,GAAG,CACjB,cAAc,EACd,SAAS,EACT,aAAa,EACb,SAAS,EACT,cAAc,EACd,SAAS,EACT,eAAe,EACf,WAAW,CACd,CAAA;IACD;IACA,IAAIC,MAAM,GAAG,EAAE,CAAA;IACf;IACAA,MAAM,CAACC,IAAI,GAAG,UAASC,SAAS,EAACC,QAAQ,EAAC;IACtC,EAAA,OAAOA,QAAQ,CAAA;IACnB,CAAC,CAAA;IACDH,MAAM,CAACI,QAAQ,GAAG,YAAU,EAAE,CAAA;IAC9BJ,MAAM,CAACK,KAAK,GAAG,YAAU,EAAE,CAAA;IAC3BL,MAAM,CAACM,OAAO,GAAG,YAAU,EAAE,CAAA;IAC7B;IACAP,KAAK,CAACQ,OAAO,CAACC,KAAK,IAAE;IACjBR,EAAAA,MAAM,CAACQ,KAAK,CAAC,GAAGC,SAAS,CAAA;IAC7B,CAAC,CAAC,CAAA;IACF,SAASA,SAAS,CAACP,SAAS,EAACC,QAAQ,EAAC;IAClC;IACA,EAAA,IAAGA,QAAQ,EAAC;IACR,IAAA,IAAGD,SAAS,EAAC;IACT,MAAA,OAAOA,SAAS,CAACQ,MAAM,CAACP,QAAQ,CAAC,CAAA;IACrC,KAAC,MAAI;UACD,OAAO,CAACA,QAAQ,CAAC,CAAA;IACrB,KAAA;IACJ,GAAC,MAAI;IACD,IAAA,OAAOD,SAAS,CAAA;IACpB,GAAA;IACJ,CAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,SAASS,YAAY,CAACC,MAAM,EAACC,KAAK,EAAC;MACtCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAACH,MAAM,EAACC,KAAK,CAAC,CAAA;IAC3C;MACA,MAAMG,OAAO,GAAG,EAAE,CAAA;IAClB;IACA,EAAA,KAAI,IAAIC,GAAG,IAAIL,MAAM,EAAC;QAClBM,UAAU,CAACD,GAAG,CAAC,CAAA;IACnB,GAAA;IACA;IACA,EAAA,KAAI,IAAIA,GAAG,IAAIJ,KAAK,EAAC;IAAC;QAClBK,UAAU,CAACD,GAAG,CAAC,CAAA;IACnB,GAAA;MACA,SAASC,UAAU,CAACD,GAAG,EAAC;IACpB;IACA,IAAA,IAAGjB,MAAM,CAACiB,GAAG,CAAC,EAAC;IAAC;IACZD,MAAAA,OAAO,CAACC,GAAG,CAAC,GAAGjB,MAAM,CAACiB,GAAG,CAAC,CAACL,MAAM,CAACK,GAAG,CAAC,EAACJ,KAAK,CAACI,GAAG,CAAC,CAAC,CAAA;IACtD,KAAC,MAAI;IACDD,MAAAA,OAAO,CAACC,GAAG,CAAC,GAAGJ,KAAK,CAACI,GAAG,CAAC,CAAA;IAC7B,KAAA;IACJ,GAAA;IACA;IACA,EAAA,OAAOD,OAAO,CAAA;IAClB;;IC/DA;IACA;IACA;IACA;IACA;IACO,SAASG,aAAa,CAACC,GAAG,EAAC;IAE9BA,EAAAA,GAAG,CAACJ,OAAO,GAAG,EAAE,CAAA;IAChBI,EAAAA,GAAG,CAACC,KAAK,GAAG,UAAUC,KAAK,EAAC;IAAC;IACzB;IACA;QACA,IAAI,CAACN,OAAO,GAAGL,YAAY,CAAC,IAAI,CAACK,OAAO,EAACM,KAAK,CAAC,CAAA;QAChDR,OAAO,CAACC,GAAG,CAAC,UAAU,EAACK,GAAG,CAACJ,OAAO,CAAC,CAAA;IACnCF,IAAAA,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACK,GAAG,CAAC,CAAA;OAErC,CAAA;IACL;;ICjBA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMG,YAAY,GAAG,0BAA0B,CAAC;IAChD;IACA;IACA;IACA;IACA,SAASC,QAAQ,CAACC,KAAK,EAAE;MACrB,IAAIC,GAAG,GAAG,EAAE,CAAA;IACZ,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACnC,IAAA,IAAIE,IAAI,GAAGJ,KAAK,CAACE,CAAC,CAAC,CAAC;IACpB,IAAA,IAAIE,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;IAAC;UACxB,IAAIC,GAAG,GAAG,EAAE,CAAA;UACZF,IAAI,CAACG,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC1B,OAAO,CAAC2B,IAAI,IAAI;IAAC;YACnC,IAAI,CAACjB,GAAG,EAAEe,KAAK,CAAC,GAAGE,IAAI,CAACD,KAAK,CAAC,GAAG,CAAC,CAAA;IAClCF,QAAAA,GAAG,CAACd,GAAG,CAAC,GAAGe,KAAK,CAAC;IACrB,OAAC,CAAC,CAAA;;UACFH,IAAI,CAACG,KAAK,GAAGD,GAAG,CAAA;IACpB,KAAA;IACAL,IAAAA,GAAG,IAAK,CAAA,EAAEG,IAAI,CAACC,IAAK,CAAGK,CAAAA,EAAAA,IAAI,CAACC,SAAS,CAACP,IAAI,CAACG,KAAK,CAAE,GAAE,CAAC;IACzD,GAAA;;MACA,OAAQ,CAAA,CAAA,EAAGN,GAAG,CAACW,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAE,CAAA,CAAA,CAAA;IAClC,CAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,SAASC,WAAW,CAACC,EAAE,EAAE;IACrB,EAAA,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ,CAAC;IAC3B;IACA,EAAA,IAAIA,QAAQ,EAAE;IACV,IAAA,OAAOA,QAAQ,CAACC,GAAG,CAAC5B,KAAK,IAAI6B,GAAG,CAAC7B,KAAK,CAAC,CAAC,CAAC8B,IAAI,CAAC,GAAG,CAAC,CAAA;IACtD,GAAA;IACJ,CAAA;IACA;IACA;IACA;IACA;IACA,SAASD,GAAG,CAACE,IAAI,EAAE;IACf,EAAA,IAAIA,IAAI,CAACC,IAAI,IAAI,CAAC,EAAE;IAAC;QACjB,OAAOC,QAAQ,CAACF,IAAI,CAAC,CAAA;IACzB,GAAC,MAAM;IAAC;IACJ,IAAA,IAAIG,IAAI,GAAGH,IAAI,CAACG,IAAI,CAAC;IACrB,IAAA,IAAI,CAACxB,YAAY,CAACyB,IAAI,CAACD,IAAI,CAAC,EAAE;IAAC;UAC3B,OAAQ,CAAA,GAAA,EAAKZ,IAAI,CAACC,SAAS,CAACW,IAAI,CAAE,GAAE,CAAC;IACzC,KAAA;IACA;QACA,IAAIE,MAAM,GAAG,EAAE,CAAC;IAChB,IAAA,IAAIC,SAAS,GAAG3B,YAAY,CAAC4B,SAAS,GAAG,CAAC,CAAC;IAC3C,IAAA,IAAIC,KAAK,CAAA;QACT,OAAOA,KAAK,GAAG7B,YAAY,CAAC8B,IAAI,CAACN,IAAI,CAAC,EAAE;IAAC;IACrC,MAAA,IAAIO,KAAK,GAAGF,KAAK,CAACE,KAAK,CAAC;UACxB,IAAIA,KAAK,GAAGJ,SAAS,EAAE;IACnBD,QAAAA,MAAM,CAACM,IAAI,CAACpB,IAAI,CAACC,SAAS,CAACW,IAAI,CAACV,KAAK,CAACa,SAAS,EAAEI,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9D,OAAA;IACA;IACAL,MAAAA,MAAM,CAACM,IAAI,CAAE,CAAA,GAAA,EAAKH,KAAK,CAAC,CAAC,CAAC,CAACI,IAAI,EAAG,CAAA,CAAA,CAAE,CAAC,CAAA;IACrC;UACAN,SAAS,GAAGI,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACxB,MAAM,CAAA;IACnC;IACJ,KAAA;;IACA,IAAA,IAAIsB,SAAS,GAAGH,IAAI,CAACnB,MAAM,EAAE;IAAC;IAC1BqB,MAAAA,MAAM,CAACM,IAAI,CAACpB,IAAI,CAACC,SAAS,CAACW,IAAI,CAACV,KAAK,CAACa,SAAS,CAAC,CAAC,CAAC,CAAA;IACtD,KAAA;;IACA,IAAA,OAAQ,MAAKD,MAAM,CAACN,IAAI,CAAC,GAAG,CAAE,CAAE,CAAA,CAAA,CAAA;IACpC,GAAA;IACJ,CAAA;IAEO,SAASG,QAAQ,CAACP,EAAE,EAAE;IACzB;IACA;IACA,EAAA,IAAIC,QAAQ,GAAGF,WAAW,CAACC,EAAE,CAAC,CAAA;IAC9B;IACA,EAAA,IAAIkB,IAAI,GAAI,CAAMlB,IAAAA,EAAAA,EAAE,CAACmB,GAAI,CAAInB,EAAAA,EAAAA,EAAE,CAACd,KAAK,CAACG,MAAM,GAAI,CAAEJ,EAAAA,QAAQ,CAACe,EAAE,CAACd,KAAK,CAAE,CAAA,CAAC,GAAG,WAAY,CAAA,EAAEe,QAAQ,GAAI,CAAGA,CAAAA,EAAAA,QAAS,CAAC,CAAA,GAAG,EAAG,CAAE,CAAA,CAAA,CAAA;IACxH;IACA,EAAA,OAAOiB,IAAI,CAAA;IACf;;ICpFA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAKC;IACA,MAAME,MAAM,GAAI,CAA6B,4BAAA,CAAA,CAAA;IAC7C,MAAMC,YAAY,GAAI,CAAA,IAAA,EAAMD,MAAO,CAAOA,KAAAA,EAAAA,MAAO,GAAE,CAAC;IACpD,MAAME,YAAY,GAAG,IAAIC,MAAM,CAAE,CAAIF,EAAAA,EAAAA,YAAa,CAAC,CAAA,CAAC,CAAC;;IAErD,MAAMG,SAAS,GACb,2EAA2E,CAAC;IAC9E,MAAMC,aAAa,GAAG,YAAY,CAAC;IAGnC,MAAMC,MAAM,GAAG,IAAIH,MAAM,CAAE,CAAOF,KAAAA,EAAAA,YAAa,CAAO,MAAA,CAAA,CAAC,CAAC;IACxD;IACA;IACA;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEC,SAASM,gBAAgB,CAACR,GAAG,EAACjC,KAAK,EAAC;MAClC,OAAO;QACLiC,GAAG;IAAC;QACJjC,KAAK;IAAC;IACNe,IAAAA,QAAQ,EAAC,EAAE;IAAC;IACZK,IAAAA,IAAI,EAAC,CAAC;IAAC;IACPjC,IAAAA,MAAM,EAAC,IAAI;OACZ,CAAA;IACH,CAAA;;IACA,IAAIuD,IAAI,CAAC;IACT,IAAIC,YAAY,CAAE;IAClB;IACA,IAAIC,KAAK,GAAG,EAAE,CAAC;;IAGf;IACA;IACD;IACA;IACA;IACA;IACA;IACC,SAASC,KAAK,CAACZ,GAAG,EAAEjC,KAAK,EAAE;IAAC;IAC1B,EAAA,IAAI8C,OAAO,GAAGL,gBAAgB,CAACR,GAAG,EAACjC,KAAK,CAAC,CAAA;MACzC,IAAG,CAAC0C,IAAI,EAAC;IACPA,IAAAA,IAAI,GAAGI,OAAO,CAAA;IAChB,GAAA;IACAH,EAAAA,YAAY,GAAGG,OAAO,CAAA;IACtBF,EAAAA,KAAK,CAACd,IAAI,CAACgB,OAAO,CAAC,CAAA;IACrB,CAAA;IACA;IACA,SAASC,MAAM,CAACzB,IAAI,EAAE;IACvB;IACG;MACAA,IAAI,GAAGA,IAAI,CAAC0B,OAAO,CAAC,KAAK,EAAC,EAAE,CAAC,CAAC;IAC9B,EAAA,IAAG1B,IAAI,EAAC;IACNqB,IAAAA,YAAY,CAAC5B,QAAQ,CAACe,IAAI,CAAC;IACzBV,MAAAA,IAAI,EAAC,CAAC;IAAC;UACPE,IAAI;IACN,KAAC,CAAC,CAAA;IACJ,GAAA;IACF,CAAA;IACA;IACA;IACD;IACA;IACA;IACA;IACC,SAAS2B,GAAG,CAAChB,GAAG,EAAE;IACnB;IACG;IACA,EAAA,IAAIa,OAAO,GAAGF,KAAK,CAACM,GAAG,EAAE,CAAC;MAC1BP,YAAY,GAAGC,KAAK,CAACA,KAAK,CAACzC,MAAM,GAAC,CAAC,CAAC,CAAC;IACrC,EAAA,IAAGwC,YAAY,EAAC;IAAC;IACfG,IAAAA,OAAO,CAAC3D,MAAM,GAAGwD,YAAY,CAACV,GAAG,CAAC;IAClCU,IAAAA,YAAY,CAAC5B,QAAQ,CAACe,IAAI,CAACgB,OAAO,CAAC,CAAC;IACtC,GAAA;IACF,CAAA;;IAGA;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACQ,SAASK,SAAS,CAACC,IAAI,EAAE;IAAC;IAC/B;IACA;IACA,EAAA,OAAOA,IAAI,EAAE;IAAC;IACZ;IACA,IAAA,IAAIC,OAAO,GAAGD,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC,CAAA;QAC/B,IAAID,OAAO,KAAK,CAAC,EAAE;IAAC;IAClB;IACA,MAAA,MAAME,aAAa,GAAGC,aAAa,EAAE,CAAC;IACtC;IACA,MAAA,IAAID,aAAa,EAAE;YACjBV,KAAK,CAACU,aAAa,CAACE,OAAO,EAAEF,aAAa,CAACvD,KAAK,CAAC,CAAA;IACjD,QAAA,SAAA;IACF,OAAA;IACA;IACA,MAAA,IAAI0D,WAAW,GAAGN,IAAI,CAACzB,KAAK,CAACa,MAAM,CAAC,CAAA;IACvC;IACG,MAAA,IAAIkB,WAAW,EAAE;IAAC;IAChBC,QAAAA,OAAO,CAACD,WAAW,CAAC,CAAC,CAAC,CAACvD,MAAM,CAAC,CAAA;IAC9B8C,QAAAA,GAAG,CAACS,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;IACnB,QAAA,SAAA;IACF,OAAA;IACF,KAAA;IACA;IACA;IACA,IAAA,IAAIpC,IAAI,CAAA;QACR,IAAI+B,OAAO,GAAG,CAAC,EAAE;IACf;IACA;IACA;UACA/B,IAAI,GAAG8B,IAAI,CAACxC,KAAK,CAAC,CAAC,EAAEyC,OAAO,CAAC,CAAA;IAC9B;IACD,KAAA;;IACA,IAAA,IAAI/B,IAAI,EAAE;IACRqC,MAAAA,OAAO,CAACrC,IAAI,CAACnB,MAAM,CAAC,CAAA;UACpB4C,MAAM,CAACzB,IAAI,CAAC,CAAA;IACd,KAAA;IACA;IACF,GAAA;IACD;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACG,EAAA,SAASkC,aAAa,GAAG;IACvB;IACA;IACL;IACA;IACA;IACK,IAAA,MAAMX,KAAK,GAAGO,IAAI,CAACzB,KAAK,CAACS,YAAY,CAAC,CAAA;IACtC;IACA,IAAA,IAAIS,KAAK,EAAE;IACT;IACA,MAAA,IAAIlB,KAAK,GAAG;IACV8B,QAAAA,OAAO,EAAEZ,KAAK,CAAC,CAAC,CAAC;IACjB7C,QAAAA,KAAK,EAAE,EAAA;WACR,CAAA;IACD2D,MAAAA,OAAO,CAACd,KAAK,CAAC,CAAC,CAAC,CAAC1C,MAAM,CAAC,CAAA;IACxB;IACA,MAAA,IAAIC,IAAI,CAAA;IACR;IACP;IACA;IACA;IACO,MAAA,IAAI6C,GAAG,CAAA;IACP;IACP;IACA;IACA;IACO;IACA;UACA,OAAO,EAAEA,GAAG,GAAGG,IAAI,CAACzB,KAAK,CAACY,aAAa,CAAC,CAAC,KAAKnC,IAAI,GAAGgD,IAAI,CAACzB,KAAK,CAACW,SAAS,CAAC,CAAC,EAAE;IAC3E;IACAX,QAAAA,KAAK,CAAC3B,KAAK,CAAC8B,IAAI,CAAC;IACfzB,UAAAA,IAAI,EAAED,IAAI,CAAC,CAAC,CAAC;IACbG,UAAAA,KAAK,EAAEH,IAAI,CAAC,CAAC,CAAC,IAAIwD,IAAI,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAA;IACrC,SAAC,CAAC,CAAA;IACFD,QAAAA,OAAO,CAACvD,IAAI,CAAC,CAAC,CAAC,CAACD,MAAM,CAAC,CAAA;IACzB,OAAA;IACA,MAAA,IAAI8C,GAAG,EAAE;IACPU,QAAAA,OAAO,CAACV,GAAG,CAAC,CAAC,CAAC,CAAC9C,MAAM,CAAC,CAAA;IACtB,QAAA,OAAOwB,KAAK,CAAC;IACf,OAAA;IACF,KAAA;IACF,GAAA;;MACA,SAASgC,OAAO,CAACE,CAAC,EAAE;IAClB;IACAT,IAAAA,IAAI,GAAGA,IAAI,CAACU,SAAS,CAACD,CAAC,CAAC,CAAA;IAC1B,GAAA;IACD;IACC,EAAA,OAAOnB,IAAI,CAAA;IACb,CAAA;;IAEA;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;ICtQO,SAASqB,iBAAiB,CAACjD,EAAE,EAAE;IACpC;IACA,EAAA,IAAIkD,GAAG,GAAGb,SAAS,CAACrC,EAAE,CAAC,CAAA;IACvB;IACA;IACA;;IAEA,EAAA,IAAIkB,IAAI,GAAGX,QAAQ,CAAC2C,GAAG,CAAC,CAAC;IACzB;IACA;MACA,IAAIC,MAAM,GAAG,IAAIC,QAAQ,CAAE,CAA+ClC,6CAAAA,EAAAA,IAAK,CAAE,CAAA,CAAA,CAAC,CAAC;IACnF;IACA,EAAA,OAAOiC,MAAM,CAAA;IACf,CAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;ICxBA;IACA;IACA;IACA;;IAIA;IACA,IAAIE,oBAAoB,GAAGC,KAAK,CAACC,SAAS,CAAA;IAC1C;IACO,IAAIC,YAAY,GAAGC,MAAM,CAACC,MAAM,CAACL,oBAAoB,CAAC,CAAA;IAC7D;IACA,IAAItF,OAAO,GAAG,CACZ,MAAM,EACN,KAAK,EACL,SAAS,EACT,OAAO,EACP,KAAK,CACN,CAAA;IACDA,OAAO,CAACC,OAAO,CAAC2B,IAAI,IAAE;IACpB6D,EAAAA,YAAY,CAAC7D,IAAI,CAAC,GAAG,UAAS,GAAGgE,IAAI,EAAC;IACpC;IACA,IAAA,IAAIC,M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"}