{"version":3,"file":"vue.js","sources":["../src/compile/index.js","../src/observe/arr.js","../src/observe/index.js","../src/initState.js","../src/init.js","../src/index.js"],"sourcesContent":["/**\n * ps：ast语法树 (abstract syntax tree 抽象语法树)  vnode(虚拟节点)\n * 如：页面结构 <div id=\"#app\">hello {{msg}}<span></span></div>\n * 对应ast为：\n * {\n * tag:'div',\n * attrs:[{id:'app'}],\n * children:[{tag:null,text:'hello'},{tag:'span'}]\n */\nfunction parseHTML(html){\n\n}\n/**以下为vue2中区别标签相关的正则 */\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`;//标签名称\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;//<span:xx>\nconst startTagOpen = new RegExp(`^${qnameCapture}`);//标签开头的正则 捕获的内容是标签名\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);//匹配标签结尾\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; //\\s所有空白符，包括换行\nconst startTagClose = /^\\s*(\\/?)>/;//匹配标签结束的>\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\nexport function compileToFunction(el){\n  console.log('---compileToFunction',el)\n  let ast = parseHTML(el);\n}","/**重写数组中的方法\n * 类名.prototype ->指向原型对象,该对象中包含了所有实例共享的属性和方法\n * 对象.__proto__ ->指向该对象所属类的prototype 两个完全相等\n */\n\n\n\n//1.获取原数组中的方法\nlet oldArrayProtoMethods = Array.prototype;\n//2.继承 ->通过指定原型对象 创建新对象ArrayMethods  ;ArrayMethods.__proto__ 指向oldArrayProtoMethods\nexport let ArrayMethods = Object.create(oldArrayProtoMethods);\n//3.列出所有需要劫持的方法\nlet methods = [\n  'push',\n  'pop',\n  'unshift',\n  'shift',\n  'pop'\n];\nmethods.forEach(item=>{\n  ArrayMethods[item] = function(...args){\n    // console.log('---劫持了数组方法item',this,args)//此时的args是个数组[],会将传入的内容放入该数组中s\n    let result = oldArrayProtoMethods[item].apply(this,args);\n    //1.此时要考虑数组追加数据的情况  如原arr = [1,2]\n    //因为追加的数据可能是1)普通3==>[1,2,3]    2）对象 {a:1} ==>[1,2,{a:1}]\n    //2.考虑追加的方式 push unshift splice\n    let inserted;//追加的内容\n    switch(item){\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.splice(2);// arr.splice(开始位置,删除长度,追加内容)\n        break;\n    }\n    /*对追加的内容进行劫持observer(inserted)\n      但是因为observer方法在./index.js中,此处无法获取(别在此处引入index.js,因为index.js引入了当前文件，会造成互相引用)\n      可以考虑将observer方法绑定在当前实例对象的某个属性上 这样当前对象可以直接使用\n      先在此处打印下this--》看看this指向谁 -通过打印得知,this指向当前数组对象 list\n    */\n    // console.log('---this',this)\n    let obj = this.__ob__;\n    if(inserted){\n      obj.observerArray(inserted)//因为args是数组 所以推荐使用observerArray\n    }\n    return result;\n    \n  }\n})","/**需要劫持的类型分两种\n * 1) 对象: 利用Object.defineProperty \n *    -缺点:只能对对象中的一个属性进行劫持\n *    -遍历:{a:1,b:2,c:3}   \n *    -递归:{a:{b:1}} get set\n * 2) 数组:方法函数劫持,重写数组方法 push unshift pop splice\n *    \n * **/\nimport {ArrayMethods} from './arr'\n//对外暴漏劫持对象方法\nexport function observer(data) {\n  // console.log('---observer', data);\n  if (typeof data != 'object' || data == null) {\n    return data; //若data不是对象 或者为null 则不需要劫持\n  }\n  //1.对象 通过一个类进行劫持\n  return new Observer(data)\n}\nclass Observer {\n  //vue2 通过defineProperty 缺点:只能对对象中的一个属性进行劫持\n  constructor(value) { //构造器\n    if(Array.isArray(value)){//数组对象劫持方法\n      value.__proto__ = ArrayMethods;\n      //如果是数组对象 [{a:1},{b:2}]\n      this.observerArray(value)\n    }else{\n      this.walk(value) //遍历非数组对象\n    }\n    /**给value上新增一个属性__obj__,值为Observer当前实例对象,\n     * 这样在劫持的data中都会有一个不可枚举的属性__obj__,可枚举性决定了这个属性能否被for…in查找遍历到\n     * 该属性直接指向当前observer实例对象（则可以直接使用observer实例上的方法）\n     * **/\n    Object.defineProperty(value,\"__ob__\",{\n      enumerable:false,\n      value:this\n    })\n  }\n  //遍历非数组对象 进行劫持\n  walk(data) {\n    let keys = Object.keys(data) //{a:{n:1},list:[1,2,3],arr:[{n:1,m:2}]} ->[a,list,arr]\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = data[key];\n      defineReactive(data, key, value); //对data中的属性取值和赋值时的操作和处理\n    }\n  }\n  //遍历数组对象 进行劫持\n  observerArray(value){//value=[{a:1},{b:2}]\n    console.log('--value',value,value.length)\n    for(let i=0;i<value.length;i++){\n      observer(value[i]);//单独劫持数组中的每个对象\n    }\n  }\n}\n//对对象中的属性进行拦截和处理\nfunction defineReactive(data, key, value) {\n  observer(value); //对value进行递归 深度代理-> 最初的data可能是{a:{b:1}} 若value值依然是对象 则继续重复劫持该对象--直到值为普通数据\n  Object.defineProperty(data, key, {\n    get() { //外部调用data.key时触发get方法\n      console.log('--get')\n      return value;\n    },\n    set(newValue) {\n      console.log('----set')\n      if (newValue === value) return; //两次内容一样 不做处理\n      observer(newValue)//修改的value也要代理（如 a:{b:1}===> a:{c:1}）,值{c:1}也需要被代理\n      value = newValue; //否则将新值赋值给旧值\n    }\n  })\n}","import { observer } from \"./observe/index\"\n\n/**初始化数据的文件？ */\nexport function initState(vm){\n  let opts = vm.$options\n  // console.log('--opts',opts)\n  //判断\n  if(opts.props){\n    initProps()\n  }\n  if(opts.data){\n    initData(vm)\n  }\n  if(opts.watch){\n    initWatch()\n  }\n  if(opts.computed){\n    initComputed()\n  }\n  if(opts.methods){\n    initMethods()\n  }\n}\nfunction initProps(){\n}\nfunction initWatch(){\n}\nfunction initComputed(){\n}\nfunction initMethods(){\n}\n//vue2 对data初始化\n/**\n * data对象情况区分：--为了解决作用域问题\n * 1）根实例是对象 {}\n * 2) 组件是函数 (){} --是为了保证组件的独立性和可复用性\n */\nfunction initData(vm){\n  // console.log('---对data进行初始化',vm);\n  let data = vm.$options.data;\n  //获取data数据\n  data = vm._data = typeof data =='function'?data.call(vm):data;//1. 注意this 2.为了方便获取 将原option中data的值直接绑定到vm._data中\n  //对数据进行劫持\n  //将data上的所有属性代理到vm实例上\n  for(let key in data){\n    //自定义函数proxy \n    proxy(vm,'_data',key)\n  }\n  observer(data)// 注意 此时拿到的data可能是以下情况 (1）对象  (2) 数组  {a:{n:1},list:[1,2,3],arr:[{n:1,m:2}]}    \n}\n//用于将代理 vm._data属性中的内容 全都直接放到vm中,key依然为原data中的key=> vm._data={a:1,b:2} 代理处理后为:vm.a=1 vm.b=2\nfunction proxy(vm,source,key){\n  Object.defineProperty(vm,key,{//定义vm中的key属性,vm.key时返回 vm._data.key的值\n    get(){\n      return vm[source][key]\n    },\n    set(newValue){//vm.key=newValue时 相当于调用vm._data.key = newValue\n      vm[source][key] = newValue;\n    }\n  })\n}\n","//Vue所有初始化的内容\nimport { compileToFunction } from \"./compile/index\";\nimport { initState } from \"./initState\";\nexport function initMixin(Vue){\n  //_init方法放到Vue原型链上\n  Vue.prototype._init = function(options){\n    // console.log('_initMixin中Vue原型链上的',options);\n    let vm = this\n    vm.$options = options//将参数帮到实例上\n    //初始化状态\n    initState(vm)\n    //渲染模版\n    if(vm.$options.el){\n      //调用vm实例的$mount方法--此方法需要定义\n      vm.$mount(vm.$options.el)\n    }\n  }\n  //创建$mount方法\n  Vue.prototype.$mount = function(el){\n    // console.log('---el',el)\n    let vm = this;\n    el = document.querySelector(el);//根据id获取当前绑定的根节点-object\n    console.log('---el',typeof el);\n    let options = vm.$options;\n    if(!options.render){//new Vue的时候没有指定render函数\n      let template = options.template;\n      if(!template && el){//new Vue的时候没有指定模版，且存在根节点\n        el = el.outerHTML; //string-[1]\n        //获取到el的最终目的是为了变成render函数\n        //将el变成ast语法树\n        let ast = compileToFunction(el);\n      }\n\n    }\n  }\n}\n/**\n * [1].获取到el之后要做的事情是\n *     1)变成ast语法树\n *     2)生成render()函数\n *     3)render函数变成虚拟dom\n *     4)\n \n * }\n */\n","//项目入口文件\nimport {initMixin} from './init.js'\nfunction Vue(options){\n  // console.log('---100 -w 的作用 自动更新dist的vue')\n  // console.log(options)\n  //初始化\n  this._init(options)\n}\ninitMixin(Vue)//调用该方法会向Vue对象的原型链上添加_init方法\nexport default Vue"],"names":["compileToFunction","el","console","log","oldArrayProtoMethods","Array","prototype","ArrayMethods","Object","create","methods","forEach","item","args","result","apply","inserted","splice","obj","__ob__","observerArray","observer","data","Observer","value","isArray","__proto__","walk","defineProperty","enumerable","keys","i","length","key","defineReactive","get","set","newValue","initState","vm","opts","$options","props","initData","watch","computed","_data","call","proxy","source","initMixin","Vue","_init","options","$mount","document","querySelector","render","template","outerHTML"],"mappings":"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"}