{"version":3,"file":"vue.js","sources":["../src/compile/index.js","../src/observe/arr.js","../src/observe/index.js","../src/initState.js","../src/init.js","../src/index.js"],"sourcesContent":["/**\n * ps：ast语法树 (abstract syntax tree 抽象语法树)  vnode(虚拟节点)\n * 如：页面结构 <div id=\"#app\">hello {{msg}}<span></span></div>\n * 对应ast为：\n * {\n * tag:'div',\n * attrs:[{id:'app'}],\n * children:[{tag:null,text:'hello'},{tag:'span'}]\n */\n/** 以下为vue2中区别标签相关的正则 */\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`// 标签名称 ---如 div\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`;// 如  <span:xx>\nconst startTagOpen = new RegExp(`^<${qnameCapture}`);// 标签开头的正则 捕获的内容是标签名    如 <div\n\nconst attribute =\n  /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/; // \\s所有空白符，包括换行 id=\"app\"\nconst startTagClose = /^\\s*(\\/?)>/;// 匹配标签结束的 >   ps: startTagOpen + attribute + startTagClose = \"<div id=\"app\" >\n\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;// 匹配默认 {{}}\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`);// 匹配标签结尾 </div>\n// 将str -> ast\n// 遍历\n// 开始标签 <div id='app'>\nfunction  start(){}\n// 文本 {{msg}}\nfunction charts(){}\n// 结束标签 </div>\nfunction end(){}\n\n\n/**\n * \n * @param {*} html - 本次需要转换的html\n */\nfunction parseHTML(html){// html中包含的内容只有3大类型:开始标签  文本  结束标签\n  /** 思路 每次解析结束完成部分的html 删除 */\n  while(html){// html 为空结束\n    // 判断标签\n    let textEnd = html.indexOf('<');\n    if(textEnd ===0){// html以 < 开头 说明是标签\n      // 1.看是否是开始标签，与开始标签的正则startTagOpen 匹配\n      const startTagMatch = parseStartTag();//  开始标签的内容-该方法需要定义\n      console.log('----startTagMatch',startTagMatch)\n      continue\n    }\n    // 文本\n    // 说明html 不是< 开头 如： hello</div> ,这个textEnd就是5\n    if(textEnd > 0){\n      //  解析文本\n      //  获取文本内容 ---方案:// hello</div> 截取< 符号之前的内容(其实就是hello)\n      //  console.log('----textEnd',textEnd)\n      let text = html.slice(0,textEnd);\n      console.log('----text',text);\n    }\n    break;\n  }\n\n  function parseStartTag(){\n    // 子表达式指:正则表达式中用小括号包起来的表达式\n    /** match(正则表达式),若正则表达式没有全局标识/g,\n    *   则该match方法只执行一次匹配，\n    *   返回[匹配文本,与子表达式匹配的文本们...,index:匹配开始位置,input:进行匹配的字符串本身的引用] \n    *   若无结果 返回null*/\n    const start = html.match(startTagOpen);\n    // start = ['<div', 'div', index: 0, input: \"<div id='#app'>hello {{msg}}<span></span></div>\", groups: undefined]\n    // 创建ast 语法树-初级形态\n    let match = {\n      tagName : start[1],\n      attrs:[]\n    }\n    advance(start[0].length)// 向前推进一步 (删除开始标签)\n    // 获取属性 -注意 属性可能有多个 需要遍历\n    let attr \n    /*\n      注意 刚才删除了开始标签 但是开始标签还有个 >  \n      比如第一次删除了开始标签<div  剩余 id='#app'> hello {{msg}} <span></span></div>\n    */\n    let end \n    /* \n      循环剩下的html -若剩余的html 不是单纯的> (html.match(startTagClose) 为true则表示仅为>) \n      并且有属性(html.match(attribute)为true表示有属性内容)\n    */\n    // console.log('---->',html.match(startTagClose))\n    // console.log('----attribute',html.match(attribute))\n    while(!(end = html.match(startTagClose)) && (attr = html.match(attribute))){\n      // 将属性追加到match的attrs中 [{name:'id',value:'app'}]\n      match.attrs.push({\n        name:attr[1],\n        value:attr[3] ||atrr[4] ||atrr[5] \n      })\n      advance(attr[0].length)\n    }\n    if(end){\n      advance(end[0].length)\n      return match;// <div id='app'> 解析完成 返回开始节点对应的ast初级形态语法树\n    }\n  }\n  function advance(n){\n    // 删除以及识别出的html字符串 （如 识别了<div 则删除<div,n为识别出的字符串的长度）\n    html = html.substring(n)// 从html的n位置开始截取到最后,返回截取后的内容---删除了识别出的内容\n    console.log('---advance',html)\n  }\n}\n\nexport function compileToFunction(el){\n  console.log('---compileToFunction',el)\n  let ast = parseHTML(el);\n}","/**重写数组中的方法\n * 类名.prototype ->指向原型对象,该对象中包含了所有实例共享的属性和方法\n * 对象.__proto__ ->指向该对象所属类的prototype 两个完全相等\n */\n\n\n\n//1.获取原数组中的方法\nlet oldArrayProtoMethods = Array.prototype;\n//2.继承 ->通过指定原型对象 创建新对象ArrayMethods  ;ArrayMethods.__proto__ 指向oldArrayProtoMethods\nexport let ArrayMethods = Object.create(oldArrayProtoMethods);\n//3.列出所有需要劫持的方法\nlet methods = [\n  'push',\n  'pop',\n  'unshift',\n  'shift',\n  'pop'\n];\nmethods.forEach(item=>{\n  ArrayMethods[item] = function(...args){\n    // console.log('---劫持了数组方法item',this,args)//此时的args是个数组[],会将传入的内容放入该数组中s\n    let result = oldArrayProtoMethods[item].apply(this,args);\n    //1.此时要考虑数组追加数据的情况  如原arr = [1,2]\n    //因为追加的数据可能是1)普通3==>[1,2,3]    2）对象 {a:1} ==>[1,2,{a:1}]\n    //2.考虑追加的方式 push unshift splice\n    let inserted;//追加的内容\n    switch(item){\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.splice(2);// arr.splice(开始位置,删除长度,追加内容)\n        break;\n    }\n    /*对追加的内容进行劫持observer(inserted)\n      但是因为observer方法在./index.js中,此处无法获取(别在此处引入index.js,因为index.js引入了当前文件，会造成互相引用)\n      可以考虑将observer方法绑定在当前实例对象的某个属性上 这样当前对象可以直接使用\n      先在此处打印下this--》看看this指向谁 -通过打印得知,this指向当前数组对象 list\n    */\n    // console.log('---this',this)\n    let obj = this.__ob__;\n    if(inserted){\n      obj.observerArray(inserted)//因为args是数组 所以推荐使用observerArray\n    }\n    return result;\n    \n  }\n})","/**需要劫持的类型分两种\n * 1) 对象: 利用Object.defineProperty \n *    -缺点:只能对对象中的一个属性进行劫持\n *    -遍历:{a:1,b:2,c:3}   \n *    -递归:{a:{b:1}} get set\n * 2) 数组:方法函数劫持,重写数组方法 push unshift pop splice\n *    \n * **/\nimport {ArrayMethods} from './arr'\n//对外暴漏劫持对象方法\nexport function observer(data) {\n  // console.log('---observer', data);\n  if (typeof data != 'object' || data == null) {\n    return data; //若data不是对象 或者为null 则不需要劫持\n  }\n  //1.对象 通过一个类进行劫持\n  return new Observer(data)\n}\nclass Observer {\n  //vue2 通过defineProperty 缺点:只能对对象中的一个属性进行劫持\n  constructor(value) { //构造器\n    if(Array.isArray(value)){//数组对象劫持方法\n      value.__proto__ = ArrayMethods;\n      //如果是数组对象 [{a:1},{b:2}]\n      this.observerArray(value)\n    }else{\n      this.walk(value) //遍历非数组对象\n    }\n    /**给value上新增一个属性__obj__,值为Observer当前实例对象,\n     * 这样在劫持的data中都会有一个不可枚举的属性__obj__,可枚举性决定了这个属性能否被for…in查找遍历到\n     * 该属性直接指向当前observer实例对象（则可以直接使用observer实例上的方法）\n     * **/\n    Object.defineProperty(value,\"__ob__\",{\n      enumerable:false,\n      value:this\n    })\n  }\n  //遍历非数组对象 进行劫持\n  walk(data) {\n    let keys = Object.keys(data) //{a:{n:1},list:[1,2,3],arr:[{n:1,m:2}]} ->[a,list,arr]\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let value = data[key];\n      defineReactive(data, key, value); //对data中的属性取值和赋值时的操作和处理\n    }\n  }\n  //遍历数组对象 进行劫持\n  observerArray(value){//value=[{a:1},{b:2}]\n    console.log('--value',value,value.length)\n    for(let i=0;i<value.length;i++){\n      observer(value[i]);//单独劫持数组中的每个对象\n    }\n  }\n}\n//对对象中的属性进行拦截和处理\nfunction defineReactive(data, key, value) {\n  observer(value); //对value进行递归 深度代理-> 最初的data可能是{a:{b:1}} 若value值依然是对象 则继续重复劫持该对象--直到值为普通数据\n  Object.defineProperty(data, key, {\n    get() { //外部调用data.key时触发get方法\n      console.log('--get')\n      return value;\n    },\n    set(newValue) {\n      console.log('----set')\n      if (newValue === value) return; //两次内容一样 不做处理\n      observer(newValue)//修改的value也要代理（如 a:{b:1}===> a:{c:1}）,值{c:1}也需要被代理\n      value = newValue; //否则将新值赋值给旧值\n    }\n  })\n}","import { observer } from \"./observe/index\"\n\n/**初始化数据的文件？ */\nexport function initState(vm){\n  let opts = vm.$options\n  // console.log('--opts',opts)\n  //判断\n  if(opts.props){\n    initProps()\n  }\n  if(opts.data){\n    initData(vm)\n  }\n  if(opts.watch){\n    initWatch()\n  }\n  if(opts.computed){\n    initComputed()\n  }\n  if(opts.methods){\n    initMethods()\n  }\n}\nfunction initProps(){\n}\nfunction initWatch(){\n}\nfunction initComputed(){\n}\nfunction initMethods(){\n}\n//vue2 对data初始化\n/**\n * data对象情况区分：--为了解决作用域问题\n * 1）根实例是对象 {}\n * 2) 组件是函数 (){} --是为了保证组件的独立性和可复用性\n */\nfunction initData(vm){\n  // console.log('---对data进行初始化',vm);\n  let data = vm.$options.data;\n  //获取data数据\n  data = vm._data = typeof data =='function'?data.call(vm):data;//1. 注意this 2.为了方便获取 将原option中data的值直接绑定到vm._data中\n  //对数据进行劫持\n  //将data上的所有属性代理到vm实例上\n  for(let key in data){\n    //自定义函数proxy \n    proxy(vm,'_data',key)\n  }\n  observer(data)// 注意 此时拿到的data可能是以下情况 (1）对象  (2) 数组  {a:{n:1},list:[1,2,3],arr:[{n:1,m:2}]}    \n}\n//用于将代理 vm._data属性中的内容 全都直接放到vm中,key依然为原data中的key=> vm._data={a:1,b:2} 代理处理后为:vm.a=1 vm.b=2\nfunction proxy(vm,source,key){\n  Object.defineProperty(vm,key,{//定义vm中的key属性,vm.key时返回 vm._data.key的值\n    get(){\n      return vm[source][key]\n    },\n    set(newValue){//vm.key=newValue时 相当于调用vm._data.key = newValue\n      vm[source][key] = newValue;\n    }\n  })\n}\n","//Vue所有初始化的内容\nimport { compileToFunction } from \"./compile/index\";\nimport { initState } from \"./initState\";\nexport function initMixin(Vue){\n  //_init方法放到Vue原型链上\n  Vue.prototype._init = function(options){\n    // console.log('_initMixin中Vue原型链上的',options);\n    let vm = this\n    vm.$options = options//将参数帮到实例上\n    //初始化状态\n    initState(vm)\n    //渲染模版\n    if(vm.$options.el){\n      //调用vm实例的$mount方法--此方法需要定义\n      vm.$mount(vm.$options.el)\n    }\n  }\n  //创建$mount方法\n  Vue.prototype.$mount = function(el){\n    // console.log('---el',el)\n    let vm = this;\n    el = document.querySelector(el);//根据id获取当前绑定的根节点-object\n    console.log('---el',typeof el);\n    let options = vm.$options;\n    if(!options.render){//new Vue的时候没有指定render函数\n      let template = options.template;\n      if(!template && el){//new Vue的时候没有指定模版，且存在根节点\n        el = el.outerHTML; //string-[1]\n        //获取到el的最终目的是为了变成render函数\n        //将el变成ast语法树\n        let ast = compileToFunction(el);\n      }\n\n    }\n  }\n}\n/**\n * [1].获取到el之后要做的事情是\n *     1)变成ast语法树\n *     2)生成render()函数\n *     3)render函数变成虚拟dom\n *     4)\n \n * }\n */\n","//项目入口文件\nimport {initMixin} from './init.js'\nfunction Vue(options){\n  // console.log('---100 -w 的作用 自动更新dist的vue')\n  // console.log(options)\n  //初始化\n  this._init(options)\n}\ninitMixin(Vue)//调用该方法会向Vue对象的原型链上添加_init方法\nexport default Vue"],"names":["ncname","qnameCapture","startTagOpen","RegExp","attribute","startTagClose","parseHTML","html","textEnd","indexOf","startTagMatch","parseStartTag","console","log","text","slice","start","match","tagName","attrs","advance","length","attr","end","push","name","value","atrr","n","substring","compileToFunction","el","oldArrayProtoMethods","Array","prototype","ArrayMethods","Object","create","methods","forEach","item","args","result","apply","inserted","splice","obj","__ob__","observerArray","observer","data","Observer","constructor","isArray","__proto__","walk","defineProperty","enumerable","keys","i","key","defineReactive","get","set","newValue","initState","vm","opts","$options","props","initData","watch","computed","_data","call","proxy","source","initMixin","Vue","_init","options","$mount","document","querySelector","render","template","outerHTML"],"mappings":"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"}